import { writable } from 'svelte/store';
import { supabase } from '$lib/supabase/cliente';
import { user } from './auth';
import { get } from 'svelte/store';

// Tipos
export interface Campa√±a {
    id: string;
    negocio_id: string;
    usuario_id: string;
    nombre: string;
    descripcion?: string;
    tipo_campana: string;
    plataforma?: string;
    objetivo: string;
    presupuesto_total: number;
    gastado_actual?: number;
    presupuesto_diario?: number;
    fecha_inicio: string;
    fecha_fin?: string;
    estado: string;
    fecha_creacion: string;
    fecha_actualizacion?: string;
    // Campos de m√©tricas opcionales
    impresiones?: number;
    clics?: number;
    conversiones?: number;
    alcance?: number;
    interacciones?: number;
    ctr?: number;
    conversion_rate?: number;
    roas?: number;
}

// Stores
export const campa√±as = writable<Campa√±a[]>([]);
export const cargandoCampa√±as = writable(false);

// Cargar campa√±as
export const cargarCampa√±as = async (negocioId?: string) => {
    console.log('üöÄ Cargando campa√±as desde Supabase...');
    cargandoCampa√±as.set(true);
    
    try {
        const currentUser = get(user);
        if (!currentUser) {
            throw new Error('Usuario no autenticado');
        }

        let query = supabase
            .from('campanas_marketing')
            .select('*')
            .eq('usuario_id', currentUser.id)
            .order('fecha_creacion', { ascending: false });

        if (negocioId) {
            query = query.eq('negocio_id', negocioId);
        }

        const { data, error } = await query;

        if (error) {
            console.error('‚ùå Error cargando campa√±as:', error);
            throw error;
        }

        console.log('‚úÖ Campa√±as cargadas:', data);
        campa√±as.set(data || []);
        
    } catch (error) {
        console.error('‚ùå Error en cargarCampa√±as:', error);
        campa√±as.set([]);
        throw error;
    } finally {
        cargandoCampa√±as.set(false);
    }
};

// Crear campa√±a
export const crearCampa√±a = async (nuevaCampa√±a: any) => {
    console.log('üöÄ STORE: Iniciando crearCampa√±a');
    console.log('üì¶ STORE: Datos recibidos:', JSON.stringify(nuevaCampa√±a, null, 2));
    cargandoCampa√±as.set(true);
    
    try {
        console.log('üë§ STORE: Obteniendo usuario actual...');
        const currentUser = get(user);
        console.log('üë§ STORE: Usuario obtenido:', currentUser ? 'OK' : 'NULL');
        if (!currentUser) {
            console.log('‚ùå STORE: Usuario no autenticado');
            throw new Error('Usuario no autenticado');
        }
        console.log('‚úÖ STORE: Usuario v√°lido:', currentUser.id);

        // Limpiar y validar datos antes de insertar - SIN CAMPO ID
        console.log('üßπ STORE: Limpiando datos...');
        
        // Validar campos obligatorios
        if (!nuevaCampa√±a.negocio_id) {
            console.log('‚ùå STORE: negocio_id faltante');
            throw new Error('negocio_id es obligatorio');
        }
        
        if (!nuevaCampa√±a.nombre || !nuevaCampa√±a.nombre.trim()) {
            console.log('‚ùå STORE: nombre faltante');
            throw new Error('nombre es obligatorio');
        }
        
        if (!nuevaCampa√±a.fecha_inicio) {
            console.log('‚ùå STORE: fecha_inicio faltante');
            throw new Error('fecha_inicio es obligatorio');
        }
        
        const campa√±aCompleta = {
            // Campos obligatorios
            negocio_id: nuevaCampa√±a.negocio_id,
            usuario_id: currentUser.id,
            nombre: nuevaCampa√±a.nombre.trim(),
            tipo_campana: nuevaCampa√±a.tipo_campana || 'google_ads',
            plataforma: nuevaCampa√±a.plataforma || 'google-ads', // CAMPO OBLIGATORIO AGREGADO
            objetivo: nuevaCampa√±a.objetivo || 'conversiones',
            presupuesto_total: Number(nuevaCampa√±a.presupuesto_total) || 1000,
            fecha_inicio: nuevaCampa√±a.fecha_inicio,
            estado: nuevaCampa√±a.estado || 'borrador',
            fecha_creacion: new Date().toISOString(),
            // Campos opcionales (solo si existen)
            ...(nuevaCampa√±a.descripcion && nuevaCampa√±a.descripcion.trim() && { 
                descripcion: nuevaCampa√±a.descripcion.trim() 
            }),
            ...(nuevaCampa√±a.fecha_fin && { fecha_fin: nuevaCampa√±a.fecha_fin })
        };
        
        console.log('‚úÖ STORE: Datos limpiados correctamente');

        console.log('üìù STORE: Datos finales a insertar:', JSON.stringify(campa√±aCompleta, null, 2));
        console.log('üíæ STORE: Iniciando inserci√≥n en Supabase...');

        const { data, error } = await supabase
            .from('campanas_marketing')
            .insert([campa√±aCompleta])
            .select()
            .single();

        console.log('üìä STORE: Respuesta de Supabase - data:', data);
        console.log('üìä STORE: Respuesta de Supabase - error:', error);

        if (error) {
            console.error('‚ùå STORE: Error insertando campa√±a:', error);
            console.error('‚ùå STORE: Error detalles:', JSON.stringify(error, null, 2));
            throw error;
        }

        console.log('‚úÖ Campa√±a creada:', data);

        // Actualizar el store local
        campa√±as.update(list => [...list, data]);
        
        return data;
    } catch (error) {
        console.error('‚ùå Error en crearCampa√±a:', error);
        throw error;
    } finally {
        cargandoCampa√±as.set(false);
    }
};

// Actualizar campa√±a
export const actualizarCampa√±a = async (id: string, datosActualizados: Partial<Campa√±a>) => {
    console.log('üöÄ Actualizando campa√±a:', id, datosActualizados);
    cargandoCampa√±as.set(true);
    
    try {
        const { data, error } = await supabase
            .from('campanas_marketing')
            .update({
                ...datosActualizados,
                fecha_actualizacion: new Date().toISOString()
            })
            .eq('id', id)
            .select()
            .single();

        if (error) {
            console.error('‚ùå Error actualizando campa√±a:', error);
            throw error;
        }

        console.log('‚úÖ Campa√±a actualizada:', data);

        // Actualizar el store local
        campa√±as.update(list => 
            list.map(campa√±a => campa√±a.id === id ? data : campa√±a)
        );
        
        return data;
    } catch (error) {
        console.error('‚ùå Error en actualizarCampa√±a:', error);
        throw error;
    } finally {
        cargandoCampa√±as.set(false);
    }
};

// Eliminar campa√±a
export const eliminarCampa√±a = async (id: string) => {
    console.log('üöÄ Eliminando campa√±a:', id);
    cargandoCampa√±as.set(true);
    
    try {
        const { error } = await supabase
            .from('campanas_marketing')
            .delete()
            .eq('id', id);

        if (error) {
            console.error('‚ùå Error eliminando campa√±a:', error);
            throw error;
        }

        console.log('‚úÖ Campa√±a eliminada');

        // Actualizar el store local
        campa√±as.update(list => list.filter(campa√±a => campa√±a.id !== id));
        
    } catch (error) {
        console.error('‚ùå Error en eliminarCampa√±a:', error);
        throw error;
    } finally {
        cargandoCampa√±as.set(false);
    }
}; 